---1.2---
% search2(Elem, List)

search2(X, cons(X, cons(X, _))).
search2(X, cons(_, Xs)) :- Xs \= cons(X, cons(X, _)), search2(X, Xs).


Goal: search2(a, cons(c, cons(a, cons(a, cons(d, cons(a, cons(a, nil))))))). --> yes, yes.
Goal: search2(a, cons(c, cons(a, cons(a, cons(a, nil)))). --> yes, yes
Goal: search2(a, L). --> yes, yes, yes...
Goal: search2(a, cons(_, cons(a, cons(_, cons(a, cons(_, nil)))))). --> yes, yes, yes, yes.

---1.3---
% search_two(Elem, List)

search_two(X, cons(X, cons(Y, cons(X, _)))) :- Y \= X.
search_two(X, cons(_, Xs)) :- search_two(X, Xs).

---1.4---
% search_anytwo (Elem , List )

search(X , cons (X , _)).
search(X , cons (H, Xs)) :- H \= X, search (X , Xs).
search_anytwo(X, cons(X, Xs)) :- search(X, Xs).
search_anytwo(X, cons(H, Xs)) :- H \= X, search_anytwo(X, Xs).